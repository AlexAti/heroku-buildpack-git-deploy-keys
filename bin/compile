#!/usr/bin/env ruby

require 'fileutils'
require 'pathname'
require 'tmpdir'
require 'tempfile'

build_dir    = ARGV[0]
cache_dir    = ARGV[1]
env_dir      = ARGV[2]
ssh_dir      = File.expand_path "#{ENV['HOME']}/.ssh"

def alert(str)
  str.split('\n').each do |line|
    puts "       !!!! #{line}"
  end
end

def arrow(str)
  str.split("\n").each do |line|
    puts ":::::> #{line}"
  end
end

get_package_and_name =  proc do |k|

  pair = k.split("\n")
  name = pair[0]
  key = pair[1..-1].join("\n")

  [name, key]
end

def fingerprint(key)
  Dir.mktmpdir "verify" do |dir|

    temp_key_file = Tempfile.new "key"
    temp_key_file.puts key
    temp_key_file.close

    # Process key to standardise it's format
    `ssh-keygen -e -P '' -f #{temp_key_file.path} < /dev/null > #{dir}/ssh_buildpack_key.pub.rfc 2>/dev/null`
    `ssh-keygen -i -P '' -f #{dir}/ssh_buildpack_key.pub.rfc > #{dir}/ssh_buildpack_key.pub 2>/dev/null`

    # # Process host hash to standardise it's format
    # `ssh-keygen -e -P '' -f #{key_file_path} < /dev/null > #{dir}/host_hash.pub.rfc 2>/dev/null`
    # `ssh-keygen -i -P '' -f #{dir}/host_hash.pub.rfc > #{dir}/host_hash.pub 2>/dev/null`

    `ssh-keygen -l -f #{dir}/ssh_buildpack_key.pub | awk '{print $2}'`

  end
end

def verify_key(key)

  key_fingerprint = fingerprint key

  # only used to be sure the passed key was valid
  temp_key = `echo "#{key_fingerprint}" | tr -ds ':' '' | egrep -ie "[a-f0-9]{32}" 2>/dev/null`

  # clean_host_hash = `cat "#{dir}/host_hash.pub"`

  if temp_key.strip == ''
    alert "GITHUB_DEPLOY_KEY(S) was invalid"
    exit 1
  else
    arrow "Using key #{key_fingerprint}"
  end

  return key_fingerprint

end




arrow "############################################"
arrow "         GIT DEPLOY KEY BUILDPACK           "
arrow "############################################"

arrow "ssh dir is #{ssh_dir}"
################# Get the key from heroku's environment config #################
single_key_file_path = File.join env_dir, 'GITHUB_DEPLOY_KEY'
multi_key_file_path = File.join env_dir, 'GITHUB_DEPLOY_KEYS'

# Check if using GITHUB_DEPLOY_KEY or GITHUB_DEPLOY_KEYS
use_single_key = File.zero? multi_key_file_path

key_file_path = use_single_key ? single_key_file_path : multi_key_file_path
arrow "Using " + (use_single_key ? "Single Key" : "Multiple Keys")

ssh_key = File.open(key_file_path, &:read) if File.exist? key_file_path

if ssh_key.nil?
  alert "GITHUB_DEDLOY_KEY(S) not set"
  alert "  Try `heroku config:add GITHUB_DEPLOY_KEY(S)=<your private token(s)>`"
  exit 1
end

############# Get the known host from heroku's environment config ##############
host_hash_path = File.join env_dir, 'GITHUB_HOST_HASH'
host_hash = File.open(host_hash_path, &:read) if File.exist? host_hash_path

if host_hash.nil?
  alert "GITHUB_HOST_HASH not set"
  alert "  Try `heroku config:add GITHUB_HOST_HASH=<hash>`"
  exit 1
end

###################### Process and clean up the ssh keys #######################
fingerprint = nil
temp_key = nil
clean_host_hash = nil

# Get all the content out of the key file
key_file =  File.open key_file_path, 'r'
key_file_content = key_file.read
key_file.close

# keys looks like [["package", "key"], ["package", "key"]]
# We want to use the same verify_key proc,
# so just wrap the single key with a blank package in an array
keys = if use_single_key
         [["all", key_file_content]]
       else
         key_file_content.
           gsub("\r\n", "\n").
           split("\n\n").map(&get_package_and_name)
       end

# Verify that the keys are all good keys
arrow "Verifying Keys"
keys.each do |key|
  verify_key key
end

# Create the ssh directory on the server
Dir.mkdir(ssh_dir, 0700) unless File.exists?(ssh_dir)

# Create id_rsa file and write contents
arrow "Configuring ssh"
keys.each do |key_and_package|
  package = key_and_package[0]
  key = key_and_package[1]

  key_path = "#{ssh_dir}/id_rsa_#{package}"

  File.open key_path, 'w' do |f|
    f.write key
    arrow "Wrote #{fingerprint(key)} into #{key_path}"
  end

  FileUtils.chmod 0600, key_path
  arrow "Wrote ssh key for #{package} to user's ssh dir"

  # let ssh know about each id
  File.open "#{ssh_dir}/config", 'w' do |f|
    f.puts "IdentityFile #{key_path}"
    f.puts "host github.com"
    f.puts "     user git"
    f.puts "     IdentityFile #{key_path}"
  end
  arrow "wrote IdentityFile #{key_path} into #{ssh_dir/config}"
end

#create known_hosts file and write contents
File.open "#{ssh_dir}/known_hosts", 'w' do |f|
  f.write host_hash
end

FileUtils.chmod 0600, "#{ssh_dir}/known_hosts"
arrow "Wrote host hash to user's known hosts"

FileUtils.chmod 0600, "#{ssh_dir}/config"
arrow "Wrote config to user's config"
